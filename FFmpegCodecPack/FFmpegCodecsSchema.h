#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace FFmpegCodecPack {
    using namespace System;
    ref class codecs;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"codecs"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class codecs : public ::System::Data::DataSet {
        public : ref class codecDataTable;
        public : ref class rawtypeDataTable;
        public : ref class containerDataTable;
        public : ref class extensionDataTable;
        public : ref class mimeDataTable;
        public : ref class codecRow;
        public : ref class rawtypeRow;
        public : ref class containerRow;
        public : ref class extensionRow;
        public : ref class mimeRow;
        public : ref class codecRowChangeEvent;
        public : ref class rawtypeRowChangeEvent;
        public : ref class containerRowChangeEvent;
        public : ref class extensionRowChangeEvent;
        public : ref class mimeRowChangeEvent;
        
        private: FFmpegCodecPack::codecs::codecDataTable^  tablecodec;
        
        private: FFmpegCodecPack::codecs::rawtypeDataTable^  tablerawtype;
        
        private: FFmpegCodecPack::codecs::containerDataTable^  tablecontainer;
        
        private: FFmpegCodecPack::codecs::extensionDataTable^  tableextension;
        
        private: FFmpegCodecPack::codecs::mimeDataTable^  tablemime;
        
        private: ::System::Data::DataRelation^  relationcontainer_extension;
        
        private: ::System::Data::DataRelation^  relationcontainer_mime;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void codecRowChangeEventHandler(::System::Object^  sender, FFmpegCodecPack::codecs::codecRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void rawtypeRowChangeEventHandler(::System::Object^  sender, FFmpegCodecPack::codecs::rawtypeRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void containerRowChangeEventHandler(::System::Object^  sender, FFmpegCodecPack::codecs::containerRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void extensionRowChangeEventHandler(::System::Object^  sender, FFmpegCodecPack::codecs::extensionRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void mimeRowChangeEventHandler(::System::Object^  sender, FFmpegCodecPack::codecs::mimeRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        codecs();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        codecs(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property FFmpegCodecPack::codecs::codecDataTable^  codec {
            FFmpegCodecPack::codecs::codecDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property FFmpegCodecPack::codecs::rawtypeDataTable^  rawtype {
            FFmpegCodecPack::codecs::rawtypeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property FFmpegCodecPack::codecs::containerDataTable^  container {
            FFmpegCodecPack::codecs::containerDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property FFmpegCodecPack::codecs::extensionDataTable^  extension {
            FFmpegCodecPack::codecs::extensionDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property FFmpegCodecPack::codecs::mimeDataTable^  mime {
            FFmpegCodecPack::codecs::mimeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializecodec();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializerawtype();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializecontainer();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeextension();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializemime();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class codecDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnAVCodecID;
            
            private: ::System::Data::DataColumn^  columnMFType;
            
            private: ::System::Data::DataColumn^  columnbuild;
            
            private: ::System::Data::DataColumn^  columnguid;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::codecRowChangeEventHandler^  codecRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::codecRowChangeEventHandler^  codecRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::codecRowChangeEventHandler^  codecRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::codecRowChangeEventHandler^  codecRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            codecDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            codecDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            codecDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  AVCodecIDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MFTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  buildColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  guidColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::codecRow^  default [::System::Int32 ] {
                FFmpegCodecPack::codecs::codecRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddcodecRow(FFmpegCodecPack::codecs::codecRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::codecRow^  AddcodecRow(
                        System::String^  name, 
                        System::String^  type, 
                        System::String^  AVCodecID, 
                        System::String^  MFType, 
                        System::String^  build, 
                        System::String^  guid);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::codecRow^  NewcodecRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovecodecRow(FFmpegCodecPack::codecs::codecRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class rawtypeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnAVFormat;
            
            private: ::System::Data::DataColumn^  columnMFType;
            
            private: ::System::Data::DataColumn^  columnguid;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::rawtypeRowChangeEventHandler^  rawtypeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::rawtypeRowChangeEventHandler^  rawtypeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::rawtypeRowChangeEventHandler^  rawtypeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::rawtypeRowChangeEventHandler^  rawtypeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            rawtypeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            rawtypeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            rawtypeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  AVFormatColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MFTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  guidColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::rawtypeRow^  default [::System::Int32 ] {
                FFmpegCodecPack::codecs::rawtypeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddrawtypeRow(FFmpegCodecPack::codecs::rawtypeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::rawtypeRow^  AddrawtypeRow(System::String^  name, System::String^  type, System::String^  AVFormat, 
                        System::String^  MFType, System::String^  guid);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::rawtypeRow^  NewrawtypeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoverawtypeRow(FFmpegCodecPack::codecs::rawtypeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class containerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnbuild;
            
            private: ::System::Data::DataColumn^  columncontainer_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::containerRowChangeEventHandler^  containerRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::containerRowChangeEventHandler^  containerRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::containerRowChangeEventHandler^  containerRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::containerRowChangeEventHandler^  containerRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            containerDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            containerDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            containerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  buildColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  container_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::containerRow^  default [::System::Int32 ] {
                FFmpegCodecPack::codecs::containerRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddcontainerRow(FFmpegCodecPack::codecs::containerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::containerRow^  AddcontainerRow(System::String^  name, System::String^  build);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::containerRow^  NewcontainerRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovecontainerRow(FFmpegCodecPack::codecs::containerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class extensionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnextension_Column;
            
            private: ::System::Data::DataColumn^  columncontainer_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::extensionRowChangeEventHandler^  extensionRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::extensionRowChangeEventHandler^  extensionRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::extensionRowChangeEventHandler^  extensionRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::extensionRowChangeEventHandler^  extensionRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            extensionDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            extensionDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            extensionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  extension_ColumnColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  container_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::extensionRow^  default [::System::Int32 ] {
                FFmpegCodecPack::codecs::extensionRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddextensionRow(FFmpegCodecPack::codecs::extensionRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::extensionRow^  AddextensionRow(System::String^  extension_Column, FFmpegCodecPack::codecs::containerRow^  parentcontainerRowBycontainer_extension);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::extensionRow^  NewextensionRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveextensionRow(FFmpegCodecPack::codecs::extensionRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class mimeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnmime_Column;
            
            private: ::System::Data::DataColumn^  columncontainer_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::mimeRowChangeEventHandler^  mimeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::mimeRowChangeEventHandler^  mimeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::mimeRowChangeEventHandler^  mimeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event FFmpegCodecPack::codecs::mimeRowChangeEventHandler^  mimeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            mimeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            mimeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            mimeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  mime_ColumnColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  container_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::mimeRow^  default [::System::Int32 ] {
                FFmpegCodecPack::codecs::mimeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddmimeRow(FFmpegCodecPack::codecs::mimeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::mimeRow^  AddmimeRow(System::String^  mime_Column, FFmpegCodecPack::codecs::containerRow^  parentcontainerRowBycontainer_mime);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            FFmpegCodecPack::codecs::mimeRow^  NewmimeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovemimeRow(FFmpegCodecPack::codecs::mimeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class codecRow : public ::System::Data::DataRow {
            
            private: FFmpegCodecPack::codecs::codecDataTable^  tablecodec;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            codecRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  AVCodecID {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  MFType {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  build {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  guid {
                System::String^  get();
                System::Void set(System::String^  value);
            }
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class rawtypeRow : public ::System::Data::DataRow {
            
            private: FFmpegCodecPack::codecs::rawtypeDataTable^  tablerawtype;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            rawtypeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  AVFormat {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  MFType {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  guid {
                System::String^  get();
                System::Void set(System::String^  value);
            }
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class containerRow : public ::System::Data::DataRow {
            
            private: FFmpegCodecPack::codecs::containerDataTable^  tablecontainer;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            containerRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  build {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 container_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< FFmpegCodecPack::codecs::extensionRow^  >^  GetextensionRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< FFmpegCodecPack::codecs::mimeRow^  >^  GetmimeRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class extensionRow : public ::System::Data::DataRow {
            
            private: FFmpegCodecPack::codecs::extensionDataTable^  tableextension;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            extensionRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  extension_Column {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 container_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::containerRow^  containerRow {
                FFmpegCodecPack::codecs::containerRow^  get();
                System::Void set(FFmpegCodecPack::codecs::containerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscontainer_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcontainer_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class mimeRow : public ::System::Data::DataRow {
            
            private: FFmpegCodecPack::codecs::mimeDataTable^  tablemime;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            mimeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  mime_Column {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 container_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::containerRow^  containerRow {
                FFmpegCodecPack::codecs::containerRow^  get();
                System::Void set(FFmpegCodecPack::codecs::containerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscontainer_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcontainer_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class codecRowChangeEvent : public ::System::EventArgs {
            
            private: FFmpegCodecPack::codecs::codecRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            codecRowChangeEvent(FFmpegCodecPack::codecs::codecRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::codecRow^  Row {
                FFmpegCodecPack::codecs::codecRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class rawtypeRowChangeEvent : public ::System::EventArgs {
            
            private: FFmpegCodecPack::codecs::rawtypeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            rawtypeRowChangeEvent(FFmpegCodecPack::codecs::rawtypeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::rawtypeRow^  Row {
                FFmpegCodecPack::codecs::rawtypeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class containerRowChangeEvent : public ::System::EventArgs {
            
            private: FFmpegCodecPack::codecs::containerRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            containerRowChangeEvent(FFmpegCodecPack::codecs::containerRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::containerRow^  Row {
                FFmpegCodecPack::codecs::containerRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class extensionRowChangeEvent : public ::System::EventArgs {
            
            private: FFmpegCodecPack::codecs::extensionRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            extensionRowChangeEvent(FFmpegCodecPack::codecs::extensionRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::extensionRow^  Row {
                FFmpegCodecPack::codecs::extensionRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class mimeRowChangeEvent : public ::System::EventArgs {
            
            private: FFmpegCodecPack::codecs::mimeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            mimeRowChangeEvent(FFmpegCodecPack::codecs::mimeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property FFmpegCodecPack::codecs::mimeRow^  Row {
                FFmpegCodecPack::codecs::mimeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace FFmpegCodecPack {
    
    
    inline codecs::codecs() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &FFmpegCodecPack::codecs::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline codecs::codecs(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &FFmpegCodecPack::codecs::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"codec"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::codecDataTable(ds->Tables[L"codec"])));
            }
            if (ds->Tables[L"rawtype"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::rawtypeDataTable(ds->Tables[L"rawtype"])));
            }
            if (ds->Tables[L"container"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::containerDataTable(ds->Tables[L"container"])));
            }
            if (ds->Tables[L"extension"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::extensionDataTable(ds->Tables[L"extension"])));
            }
            if (ds->Tables[L"mime"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::mimeDataTable(ds->Tables[L"mime"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &FFmpegCodecPack::codecs::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline FFmpegCodecPack::codecs::codecDataTable^  codecs::codec::get() {
        return this->tablecodec;
    }
    
    inline FFmpegCodecPack::codecs::rawtypeDataTable^  codecs::rawtype::get() {
        return this->tablerawtype;
    }
    
    inline FFmpegCodecPack::codecs::containerDataTable^  codecs::container::get() {
        return this->tablecontainer;
    }
    
    inline FFmpegCodecPack::codecs::extensionDataTable^  codecs::extension::get() {
        return this->tableextension;
    }
    
    inline FFmpegCodecPack::codecs::mimeDataTable^  codecs::mime::get() {
        return this->tablemime;
    }
    
    inline ::System::Data::SchemaSerializationMode codecs::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void codecs::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  codecs::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  codecs::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void codecs::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  codecs::Clone() {
        FFmpegCodecPack::codecs^  cln = (cli::safe_cast<FFmpegCodecPack::codecs^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean codecs::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean codecs::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void codecs::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"codec"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::codecDataTable(ds->Tables[L"codec"])));
            }
            if (ds->Tables[L"rawtype"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::rawtypeDataTable(ds->Tables[L"rawtype"])));
            }
            if (ds->Tables[L"container"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::containerDataTable(ds->Tables[L"container"])));
            }
            if (ds->Tables[L"extension"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::extensionDataTable(ds->Tables[L"extension"])));
            }
            if (ds->Tables[L"mime"] != nullptr) {
                __super::Tables->Add((gcnew FFmpegCodecPack::codecs::mimeDataTable(ds->Tables[L"mime"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  codecs::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void codecs::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void codecs::InitVars(::System::Boolean initTable) {
        this->tablecodec = (cli::safe_cast<FFmpegCodecPack::codecs::codecDataTable^  >(__super::Tables[L"codec"]));
        if (initTable == true) {
            if (this->tablecodec != nullptr) {
                this->tablecodec->InitVars();
            }
        }
        this->tablerawtype = (cli::safe_cast<FFmpegCodecPack::codecs::rawtypeDataTable^  >(__super::Tables[L"rawtype"]));
        if (initTable == true) {
            if (this->tablerawtype != nullptr) {
                this->tablerawtype->InitVars();
            }
        }
        this->tablecontainer = (cli::safe_cast<FFmpegCodecPack::codecs::containerDataTable^  >(__super::Tables[L"container"]));
        if (initTable == true) {
            if (this->tablecontainer != nullptr) {
                this->tablecontainer->InitVars();
            }
        }
        this->tableextension = (cli::safe_cast<FFmpegCodecPack::codecs::extensionDataTable^  >(__super::Tables[L"extension"]));
        if (initTable == true) {
            if (this->tableextension != nullptr) {
                this->tableextension->InitVars();
            }
        }
        this->tablemime = (cli::safe_cast<FFmpegCodecPack::codecs::mimeDataTable^  >(__super::Tables[L"mime"]));
        if (initTable == true) {
            if (this->tablemime != nullptr) {
                this->tablemime->InitVars();
            }
        }
        this->relationcontainer_extension = this->Relations[L"container_extension"];
        this->relationcontainer_mime = this->Relations[L"container_mime"];
    }
    
    inline ::System::Void codecs::InitClass() {
        this->DataSetName = L"codecs";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/FFmpegCodecsSchema.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablecodec = (gcnew FFmpegCodecPack::codecs::codecDataTable());
        __super::Tables->Add(this->tablecodec);
        this->tablerawtype = (gcnew FFmpegCodecPack::codecs::rawtypeDataTable());
        __super::Tables->Add(this->tablerawtype);
        this->tablecontainer = (gcnew FFmpegCodecPack::codecs::containerDataTable());
        __super::Tables->Add(this->tablecontainer);
        this->tableextension = (gcnew FFmpegCodecPack::codecs::extensionDataTable());
        __super::Tables->Add(this->tableextension);
        this->tablemime = (gcnew FFmpegCodecPack::codecs::mimeDataTable());
        __super::Tables->Add(this->tablemime);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"container_extension", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontainer->container_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableextension->container_IdColumn}));
        this->tableextension->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"container_mime", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontainer->container_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemime->container_IdColumn}));
        this->tablemime->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationcontainer_extension = (gcnew ::System::Data::DataRelation(L"container_extension", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontainer->container_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableextension->container_IdColumn}, false));
        this->relationcontainer_extension->Nested = true;
        this->Relations->Add(this->relationcontainer_extension);
        this->relationcontainer_mime = (gcnew ::System::Data::DataRelation(L"container_mime", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontainer->container_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemime->container_IdColumn}, false));
        this->relationcontainer_mime->Nested = true;
        this->Relations->Add(this->relationcontainer_mime);
    }
    
    inline ::System::Boolean codecs::ShouldSerializecodec() {
        return false;
    }
    
    inline ::System::Boolean codecs::ShouldSerializerawtype() {
        return false;
    }
    
    inline ::System::Boolean codecs::ShouldSerializecontainer() {
        return false;
    }
    
    inline ::System::Boolean codecs::ShouldSerializeextension() {
        return false;
    }
    
    inline ::System::Boolean codecs::ShouldSerializemime() {
        return false;
    }
    
    inline ::System::Void codecs::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  codecs::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        FFmpegCodecPack::codecs^  ds = (gcnew FFmpegCodecPack::codecs());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline codecs::codecDataTable::codecDataTable() {
        this->TableName = L"codec";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline codecs::codecDataTable::codecDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline codecs::codecDataTable::codecDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  codecs::codecDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  codecs::codecDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  codecs::codecDataTable::AVCodecIDColumn::get() {
        return this->columnAVCodecID;
    }
    
    inline ::System::Data::DataColumn^  codecs::codecDataTable::MFTypeColumn::get() {
        return this->columnMFType;
    }
    
    inline ::System::Data::DataColumn^  codecs::codecDataTable::buildColumn::get() {
        return this->columnbuild;
    }
    
    inline ::System::Data::DataColumn^  codecs::codecDataTable::guidColumn::get() {
        return this->columnguid;
    }
    
    inline ::System::Int32 codecs::codecDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline FFmpegCodecPack::codecs::codecRow^  codecs::codecDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void codecs::codecDataTable::AddcodecRow(FFmpegCodecPack::codecs::codecRow^  row) {
        this->Rows->Add(row);
    }
    
    inline FFmpegCodecPack::codecs::codecRow^  codecs::codecDataTable::AddcodecRow(
                System::String^  name, 
                System::String^  type, 
                System::String^  AVCodecID, 
                System::String^  MFType, 
                System::String^  build, 
                System::String^  guid) {
        FFmpegCodecPack::codecs::codecRow^  rowcodecRow = (cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {name, type, AVCodecID, 
            MFType, build, guid};
        rowcodecRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcodecRow);
        return rowcodecRow;
    }
    
    inline ::System::Collections::IEnumerator^  codecs::codecDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  codecs::codecDataTable::Clone() {
        FFmpegCodecPack::codecs::codecDataTable^  cln = (cli::safe_cast<FFmpegCodecPack::codecs::codecDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  codecs::codecDataTable::CreateInstance() {
        return (gcnew FFmpegCodecPack::codecs::codecDataTable());
    }
    
    inline ::System::Void codecs::codecDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columntype = __super::Columns[L"type"];
        this->columnAVCodecID = __super::Columns[L"AVCodecID"];
        this->columnMFType = __super::Columns[L"MFType"];
        this->columnbuild = __super::Columns[L"build"];
        this->columnguid = __super::Columns[L"guid"];
    }
    
    inline ::System::Void codecs::codecDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnname);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columntype);
        this->columnAVCodecID = (gcnew ::System::Data::DataColumn(L"AVCodecID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnAVCodecID);
        this->columnMFType = (gcnew ::System::Data::DataColumn(L"MFType", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMFType);
        this->columnbuild = (gcnew ::System::Data::DataColumn(L"build", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnbuild);
        this->columnguid = (gcnew ::System::Data::DataColumn(L"guid", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnguid);
        this->columnname->AllowDBNull = false;
        this->columntype->AllowDBNull = false;
        this->columnAVCodecID->AllowDBNull = false;
        this->columnMFType->AllowDBNull = false;
        this->columnbuild->AllowDBNull = false;
        this->columnguid->AllowDBNull = false;
    }
    
    inline FFmpegCodecPack::codecs::codecRow^  codecs::codecDataTable::NewcodecRow() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  codecs::codecDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew FFmpegCodecPack::codecs::codecRow(builder));
    }
    
    inline ::System::Type^  codecs::codecDataTable::GetRowType() {
        return FFmpegCodecPack::codecs::codecRow::typeid;
    }
    
    inline ::System::Void codecs::codecDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->codecRowChanged(this, (gcnew FFmpegCodecPack::codecs::codecRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::codecDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->codecRowChanging(this, (gcnew FFmpegCodecPack::codecs::codecRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::codecDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->codecRowDeleted(this, (gcnew FFmpegCodecPack::codecs::codecRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::codecDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->codecRowDeleting(this, (gcnew FFmpegCodecPack::codecs::codecRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::codecRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::codecDataTable::RemovecodecRow(FFmpegCodecPack::codecs::codecRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  codecs::codecDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        FFmpegCodecPack::codecs^  ds = (gcnew FFmpegCodecPack::codecs());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"codecDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline codecs::rawtypeDataTable::rawtypeDataTable() {
        this->TableName = L"rawtype";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline codecs::rawtypeDataTable::rawtypeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline codecs::rawtypeDataTable::rawtypeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  codecs::rawtypeDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  codecs::rawtypeDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  codecs::rawtypeDataTable::AVFormatColumn::get() {
        return this->columnAVFormat;
    }
    
    inline ::System::Data::DataColumn^  codecs::rawtypeDataTable::MFTypeColumn::get() {
        return this->columnMFType;
    }
    
    inline ::System::Data::DataColumn^  codecs::rawtypeDataTable::guidColumn::get() {
        return this->columnguid;
    }
    
    inline ::System::Int32 codecs::rawtypeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline FFmpegCodecPack::codecs::rawtypeRow^  codecs::rawtypeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void codecs::rawtypeDataTable::AddrawtypeRow(FFmpegCodecPack::codecs::rawtypeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline FFmpegCodecPack::codecs::rawtypeRow^  codecs::rawtypeDataTable::AddrawtypeRow(System::String^  name, System::String^  type, 
                System::String^  AVFormat, System::String^  MFType, System::String^  guid) {
        FFmpegCodecPack::codecs::rawtypeRow^  rowrawtypeRow = (cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {name, type, AVFormat, 
            MFType, guid};
        rowrawtypeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowrawtypeRow);
        return rowrawtypeRow;
    }
    
    inline ::System::Collections::IEnumerator^  codecs::rawtypeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  codecs::rawtypeDataTable::Clone() {
        FFmpegCodecPack::codecs::rawtypeDataTable^  cln = (cli::safe_cast<FFmpegCodecPack::codecs::rawtypeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  codecs::rawtypeDataTable::CreateInstance() {
        return (gcnew FFmpegCodecPack::codecs::rawtypeDataTable());
    }
    
    inline ::System::Void codecs::rawtypeDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columntype = __super::Columns[L"type"];
        this->columnAVFormat = __super::Columns[L"AVFormat"];
        this->columnMFType = __super::Columns[L"MFType"];
        this->columnguid = __super::Columns[L"guid"];
    }
    
    inline ::System::Void codecs::rawtypeDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnname);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columntype);
        this->columnAVFormat = (gcnew ::System::Data::DataColumn(L"AVFormat", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnAVFormat);
        this->columnMFType = (gcnew ::System::Data::DataColumn(L"MFType", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMFType);
        this->columnguid = (gcnew ::System::Data::DataColumn(L"guid", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnguid);
        this->columnname->AllowDBNull = false;
        this->columntype->AllowDBNull = false;
        this->columnAVFormat->AllowDBNull = false;
        this->columnMFType->AllowDBNull = false;
        this->columnguid->AllowDBNull = false;
    }
    
    inline FFmpegCodecPack::codecs::rawtypeRow^  codecs::rawtypeDataTable::NewrawtypeRow() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  codecs::rawtypeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew FFmpegCodecPack::codecs::rawtypeRow(builder));
    }
    
    inline ::System::Type^  codecs::rawtypeDataTable::GetRowType() {
        return FFmpegCodecPack::codecs::rawtypeRow::typeid;
    }
    
    inline ::System::Void codecs::rawtypeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->rawtypeRowChanged(this, (gcnew FFmpegCodecPack::codecs::rawtypeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::rawtypeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->rawtypeRowChanging(this, (gcnew FFmpegCodecPack::codecs::rawtypeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::rawtypeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->rawtypeRowDeleted(this, (gcnew FFmpegCodecPack::codecs::rawtypeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::rawtypeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->rawtypeRowDeleting(this, (gcnew FFmpegCodecPack::codecs::rawtypeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::rawtypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::rawtypeDataTable::RemoverawtypeRow(FFmpegCodecPack::codecs::rawtypeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  codecs::rawtypeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        FFmpegCodecPack::codecs^  ds = (gcnew FFmpegCodecPack::codecs());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"rawtypeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline codecs::containerDataTable::containerDataTable() {
        this->TableName = L"container";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline codecs::containerDataTable::containerDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline codecs::containerDataTable::containerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  codecs::containerDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  codecs::containerDataTable::buildColumn::get() {
        return this->columnbuild;
    }
    
    inline ::System::Data::DataColumn^  codecs::containerDataTable::container_IdColumn::get() {
        return this->columncontainer_Id;
    }
    
    inline ::System::Int32 codecs::containerDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline FFmpegCodecPack::codecs::containerRow^  codecs::containerDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void codecs::containerDataTable::AddcontainerRow(FFmpegCodecPack::codecs::containerRow^  row) {
        this->Rows->Add(row);
    }
    
    inline FFmpegCodecPack::codecs::containerRow^  codecs::containerDataTable::AddcontainerRow(System::String^  name, System::String^  build) {
        FFmpegCodecPack::codecs::containerRow^  rowcontainerRow = (cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, build, nullptr};
        rowcontainerRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcontainerRow);
        return rowcontainerRow;
    }
    
    inline ::System::Collections::IEnumerator^  codecs::containerDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  codecs::containerDataTable::Clone() {
        FFmpegCodecPack::codecs::containerDataTable^  cln = (cli::safe_cast<FFmpegCodecPack::codecs::containerDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  codecs::containerDataTable::CreateInstance() {
        return (gcnew FFmpegCodecPack::codecs::containerDataTable());
    }
    
    inline ::System::Void codecs::containerDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnbuild = __super::Columns[L"build"];
        this->columncontainer_Id = __super::Columns[L"container_Id"];
    }
    
    inline ::System::Void codecs::containerDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnname);
        this->columnbuild = (gcnew ::System::Data::DataColumn(L"build", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnbuild);
        this->columncontainer_Id = (gcnew ::System::Data::DataColumn(L"container_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontainer_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncontainer_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnbuild->AllowDBNull = false;
        this->columncontainer_Id->AutoIncrement = true;
        this->columncontainer_Id->AllowDBNull = false;
        this->columncontainer_Id->Unique = true;
    }
    
    inline FFmpegCodecPack::codecs::containerRow^  codecs::containerDataTable::NewcontainerRow() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  codecs::containerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew FFmpegCodecPack::codecs::containerRow(builder));
    }
    
    inline ::System::Type^  codecs::containerDataTable::GetRowType() {
        return FFmpegCodecPack::codecs::containerRow::typeid;
    }
    
    inline ::System::Void codecs::containerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->containerRowChanged(this, (gcnew FFmpegCodecPack::codecs::containerRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::containerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->containerRowChanging(this, (gcnew FFmpegCodecPack::codecs::containerRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::containerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->containerRowDeleted(this, (gcnew FFmpegCodecPack::codecs::containerRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::containerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->containerRowDeleting(this, (gcnew FFmpegCodecPack::codecs::containerRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::containerDataTable::RemovecontainerRow(FFmpegCodecPack::codecs::containerRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  codecs::containerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        FFmpegCodecPack::codecs^  ds = (gcnew FFmpegCodecPack::codecs());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"containerDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline codecs::extensionDataTable::extensionDataTable() {
        this->TableName = L"extension";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline codecs::extensionDataTable::extensionDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline codecs::extensionDataTable::extensionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  codecs::extensionDataTable::extension_ColumnColumn::get() {
        return this->columnextension_Column;
    }
    
    inline ::System::Data::DataColumn^  codecs::extensionDataTable::container_IdColumn::get() {
        return this->columncontainer_Id;
    }
    
    inline ::System::Int32 codecs::extensionDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline FFmpegCodecPack::codecs::extensionRow^  codecs::extensionDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void codecs::extensionDataTable::AddextensionRow(FFmpegCodecPack::codecs::extensionRow^  row) {
        this->Rows->Add(row);
    }
    
    inline FFmpegCodecPack::codecs::extensionRow^  codecs::extensionDataTable::AddextensionRow(System::String^  extension_Column, 
                FFmpegCodecPack::codecs::containerRow^  parentcontainerRowBycontainer_extension) {
        FFmpegCodecPack::codecs::extensionRow^  rowextensionRow = (cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {extension_Column, nullptr};
        if (parentcontainerRowBycontainer_extension != nullptr) {
            columnValuesArray[1] = parentcontainerRowBycontainer_extension[2];
        }
        rowextensionRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowextensionRow);
        return rowextensionRow;
    }
    
    inline ::System::Collections::IEnumerator^  codecs::extensionDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  codecs::extensionDataTable::Clone() {
        FFmpegCodecPack::codecs::extensionDataTable^  cln = (cli::safe_cast<FFmpegCodecPack::codecs::extensionDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  codecs::extensionDataTable::CreateInstance() {
        return (gcnew FFmpegCodecPack::codecs::extensionDataTable());
    }
    
    inline ::System::Void codecs::extensionDataTable::InitVars() {
        this->columnextension_Column = __super::Columns[L"extension_Column"];
        this->columncontainer_Id = __super::Columns[L"container_Id"];
    }
    
    inline ::System::Void codecs::extensionDataTable::InitClass() {
        this->columnextension_Column = (gcnew ::System::Data::DataColumn(L"extension_Column", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::SimpleContent));
        __super::Columns->Add(this->columnextension_Column);
        this->columncontainer_Id = (gcnew ::System::Data::DataColumn(L"container_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontainer_Id);
        this->columnextension_Column->AllowDBNull = false;
    }
    
    inline FFmpegCodecPack::codecs::extensionRow^  codecs::extensionDataTable::NewextensionRow() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  codecs::extensionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew FFmpegCodecPack::codecs::extensionRow(builder));
    }
    
    inline ::System::Type^  codecs::extensionDataTable::GetRowType() {
        return FFmpegCodecPack::codecs::extensionRow::typeid;
    }
    
    inline ::System::Void codecs::extensionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->extensionRowChanged(this, (gcnew FFmpegCodecPack::codecs::extensionRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::extensionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->extensionRowChanging(this, (gcnew FFmpegCodecPack::codecs::extensionRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::extensionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->extensionRowDeleted(this, (gcnew FFmpegCodecPack::codecs::extensionRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::extensionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->extensionRowDeleting(this, (gcnew FFmpegCodecPack::codecs::extensionRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::extensionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::extensionDataTable::RemoveextensionRow(FFmpegCodecPack::codecs::extensionRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  codecs::extensionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        FFmpegCodecPack::codecs^  ds = (gcnew FFmpegCodecPack::codecs());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"extensionDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline codecs::mimeDataTable::mimeDataTable() {
        this->TableName = L"mime";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline codecs::mimeDataTable::mimeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline codecs::mimeDataTable::mimeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  codecs::mimeDataTable::mime_ColumnColumn::get() {
        return this->columnmime_Column;
    }
    
    inline ::System::Data::DataColumn^  codecs::mimeDataTable::container_IdColumn::get() {
        return this->columncontainer_Id;
    }
    
    inline ::System::Int32 codecs::mimeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline FFmpegCodecPack::codecs::mimeRow^  codecs::mimeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void codecs::mimeDataTable::AddmimeRow(FFmpegCodecPack::codecs::mimeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline FFmpegCodecPack::codecs::mimeRow^  codecs::mimeDataTable::AddmimeRow(System::String^  mime_Column, FFmpegCodecPack::codecs::containerRow^  parentcontainerRowBycontainer_mime) {
        FFmpegCodecPack::codecs::mimeRow^  rowmimeRow = (cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {mime_Column, nullptr};
        if (parentcontainerRowBycontainer_mime != nullptr) {
            columnValuesArray[1] = parentcontainerRowBycontainer_mime[2];
        }
        rowmimeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowmimeRow);
        return rowmimeRow;
    }
    
    inline ::System::Collections::IEnumerator^  codecs::mimeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  codecs::mimeDataTable::Clone() {
        FFmpegCodecPack::codecs::mimeDataTable^  cln = (cli::safe_cast<FFmpegCodecPack::codecs::mimeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  codecs::mimeDataTable::CreateInstance() {
        return (gcnew FFmpegCodecPack::codecs::mimeDataTable());
    }
    
    inline ::System::Void codecs::mimeDataTable::InitVars() {
        this->columnmime_Column = __super::Columns[L"mime_Column"];
        this->columncontainer_Id = __super::Columns[L"container_Id"];
    }
    
    inline ::System::Void codecs::mimeDataTable::InitClass() {
        this->columnmime_Column = (gcnew ::System::Data::DataColumn(L"mime_Column", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
        __super::Columns->Add(this->columnmime_Column);
        this->columncontainer_Id = (gcnew ::System::Data::DataColumn(L"container_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontainer_Id);
        this->columnmime_Column->AllowDBNull = false;
    }
    
    inline FFmpegCodecPack::codecs::mimeRow^  codecs::mimeDataTable::NewmimeRow() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  codecs::mimeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew FFmpegCodecPack::codecs::mimeRow(builder));
    }
    
    inline ::System::Type^  codecs::mimeDataTable::GetRowType() {
        return FFmpegCodecPack::codecs::mimeRow::typeid;
    }
    
    inline ::System::Void codecs::mimeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->mimeRowChanged(this, (gcnew FFmpegCodecPack::codecs::mimeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::mimeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->mimeRowChanging(this, (gcnew FFmpegCodecPack::codecs::mimeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::mimeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->mimeRowDeleted(this, (gcnew FFmpegCodecPack::codecs::mimeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::mimeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->mimeRowDeleting(this, (gcnew FFmpegCodecPack::codecs::mimeRowChangeEvent((cli::safe_cast<FFmpegCodecPack::codecs::mimeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void codecs::mimeDataTable::RemovemimeRow(FFmpegCodecPack::codecs::mimeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  codecs::mimeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        FFmpegCodecPack::codecs^  ds = (gcnew FFmpegCodecPack::codecs());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"mimeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline codecs::codecRow::codecRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecodec = (cli::safe_cast<FFmpegCodecPack::codecs::codecDataTable^  >(this->Table));
    }
    
    inline System::String^  codecs::codecRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecodec->nameColumn]));
    }
    inline System::Void codecs::codecRow::name::set(System::String^  value) {
        this[this->tablecodec->nameColumn] = value;
    }
    
    inline System::String^  codecs::codecRow::type::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecodec->typeColumn]));
    }
    inline System::Void codecs::codecRow::type::set(System::String^  value) {
        this[this->tablecodec->typeColumn] = value;
    }
    
    inline System::String^  codecs::codecRow::AVCodecID::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecodec->AVCodecIDColumn]));
    }
    inline System::Void codecs::codecRow::AVCodecID::set(System::String^  value) {
        this[this->tablecodec->AVCodecIDColumn] = value;
    }
    
    inline System::String^  codecs::codecRow::MFType::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecodec->MFTypeColumn]));
    }
    inline System::Void codecs::codecRow::MFType::set(System::String^  value) {
        this[this->tablecodec->MFTypeColumn] = value;
    }
    
    inline System::String^  codecs::codecRow::build::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecodec->buildColumn]));
    }
    inline System::Void codecs::codecRow::build::set(System::String^  value) {
        this[this->tablecodec->buildColumn] = value;
    }
    
    inline System::String^  codecs::codecRow::guid::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecodec->guidColumn]));
    }
    inline System::Void codecs::codecRow::guid::set(System::String^  value) {
        this[this->tablecodec->guidColumn] = value;
    }
    
    
    inline codecs::rawtypeRow::rawtypeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablerawtype = (cli::safe_cast<FFmpegCodecPack::codecs::rawtypeDataTable^  >(this->Table));
    }
    
    inline System::String^  codecs::rawtypeRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablerawtype->nameColumn]));
    }
    inline System::Void codecs::rawtypeRow::name::set(System::String^  value) {
        this[this->tablerawtype->nameColumn] = value;
    }
    
    inline System::String^  codecs::rawtypeRow::type::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablerawtype->typeColumn]));
    }
    inline System::Void codecs::rawtypeRow::type::set(System::String^  value) {
        this[this->tablerawtype->typeColumn] = value;
    }
    
    inline System::String^  codecs::rawtypeRow::AVFormat::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablerawtype->AVFormatColumn]));
    }
    inline System::Void codecs::rawtypeRow::AVFormat::set(System::String^  value) {
        this[this->tablerawtype->AVFormatColumn] = value;
    }
    
    inline System::String^  codecs::rawtypeRow::MFType::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablerawtype->MFTypeColumn]));
    }
    inline System::Void codecs::rawtypeRow::MFType::set(System::String^  value) {
        this[this->tablerawtype->MFTypeColumn] = value;
    }
    
    inline System::String^  codecs::rawtypeRow::guid::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablerawtype->guidColumn]));
    }
    inline System::Void codecs::rawtypeRow::guid::set(System::String^  value) {
        this[this->tablerawtype->guidColumn] = value;
    }
    
    
    inline codecs::containerRow::containerRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecontainer = (cli::safe_cast<FFmpegCodecPack::codecs::containerDataTable^  >(this->Table));
    }
    
    inline System::String^  codecs::containerRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecontainer->nameColumn]));
    }
    inline System::Void codecs::containerRow::name::set(System::String^  value) {
        this[this->tablecontainer->nameColumn] = value;
    }
    
    inline System::String^  codecs::containerRow::build::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecontainer->buildColumn]));
    }
    inline System::Void codecs::containerRow::build::set(System::String^  value) {
        this[this->tablecontainer->buildColumn] = value;
    }
    
    inline System::Int32 codecs::containerRow::container_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecontainer->container_IdColumn]));
    }
    inline System::Void codecs::containerRow::container_Id::set(System::Int32 value) {
        this[this->tablecontainer->container_IdColumn] = value;
    }
    
    inline cli::array< FFmpegCodecPack::codecs::extensionRow^  >^  codecs::containerRow::GetextensionRows() {
        if (this->Table->ChildRelations[L"container_extension"] == nullptr) {
            return gcnew cli::array< FFmpegCodecPack::codecs::extensionRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< FFmpegCodecPack::codecs::extensionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"container_extension"])));
        }
    }
    
    inline cli::array< FFmpegCodecPack::codecs::mimeRow^  >^  codecs::containerRow::GetmimeRows() {
        if (this->Table->ChildRelations[L"container_mime"] == nullptr) {
            return gcnew cli::array< FFmpegCodecPack::codecs::mimeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< FFmpegCodecPack::codecs::mimeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"container_mime"])));
        }
    }
    
    
    inline codecs::extensionRow::extensionRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableextension = (cli::safe_cast<FFmpegCodecPack::codecs::extensionDataTable^  >(this->Table));
    }
    
    inline System::String^  codecs::extensionRow::extension_Column::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableextension->extension_ColumnColumn]));
    }
    inline System::Void codecs::extensionRow::extension_Column::set(System::String^  value) {
        this[this->tableextension->extension_ColumnColumn] = value;
    }
    
    inline System::Int32 codecs::extensionRow::container_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableextension->container_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'container_Id\' in table \'extension\' is DBNull.", 
                e));
        }
    }
    inline System::Void codecs::extensionRow::container_Id::set(System::Int32 value) {
        this[this->tableextension->container_IdColumn] = value;
    }
    
    inline FFmpegCodecPack::codecs::containerRow^  codecs::extensionRow::containerRow::get() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"container_extension"])));
    }
    inline System::Void codecs::extensionRow::containerRow::set(FFmpegCodecPack::codecs::containerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"container_extension"]);
    }
    
    inline ::System::Boolean codecs::extensionRow::Iscontainer_IdNull() {
        return this->IsNull(this->tableextension->container_IdColumn);
    }
    
    inline ::System::Void codecs::extensionRow::Setcontainer_IdNull() {
        this[this->tableextension->container_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline codecs::mimeRow::mimeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablemime = (cli::safe_cast<FFmpegCodecPack::codecs::mimeDataTable^  >(this->Table));
    }
    
    inline System::String^  codecs::mimeRow::mime_Column::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablemime->mime_ColumnColumn]));
    }
    inline System::Void codecs::mimeRow::mime_Column::set(System::String^  value) {
        this[this->tablemime->mime_ColumnColumn] = value;
    }
    
    inline System::Int32 codecs::mimeRow::container_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablemime->container_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'container_Id\' in table \'mime\' is DBNull.", 
                e));
        }
    }
    inline System::Void codecs::mimeRow::container_Id::set(System::Int32 value) {
        this[this->tablemime->container_IdColumn] = value;
    }
    
    inline FFmpegCodecPack::codecs::containerRow^  codecs::mimeRow::containerRow::get() {
        return (cli::safe_cast<FFmpegCodecPack::codecs::containerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"container_mime"])));
    }
    inline System::Void codecs::mimeRow::containerRow::set(FFmpegCodecPack::codecs::containerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"container_mime"]);
    }
    
    inline ::System::Boolean codecs::mimeRow::Iscontainer_IdNull() {
        return this->IsNull(this->tablemime->container_IdColumn);
    }
    
    inline ::System::Void codecs::mimeRow::Setcontainer_IdNull() {
        this[this->tablemime->container_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline codecs::codecRowChangeEvent::codecRowChangeEvent(FFmpegCodecPack::codecs::codecRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline FFmpegCodecPack::codecs::codecRow^  codecs::codecRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction codecs::codecRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline codecs::rawtypeRowChangeEvent::rawtypeRowChangeEvent(FFmpegCodecPack::codecs::rawtypeRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline FFmpegCodecPack::codecs::rawtypeRow^  codecs::rawtypeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction codecs::rawtypeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline codecs::containerRowChangeEvent::containerRowChangeEvent(FFmpegCodecPack::codecs::containerRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline FFmpegCodecPack::codecs::containerRow^  codecs::containerRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction codecs::containerRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline codecs::extensionRowChangeEvent::extensionRowChangeEvent(FFmpegCodecPack::codecs::extensionRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline FFmpegCodecPack::codecs::extensionRow^  codecs::extensionRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction codecs::extensionRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline codecs::mimeRowChangeEvent::mimeRowChangeEvent(FFmpegCodecPack::codecs::mimeRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline FFmpegCodecPack::codecs::mimeRow^  codecs::mimeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction codecs::mimeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
